package repo

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// DbOperationRepoMock implements DBOperationRepo
type DbOperationRepoMock struct {
	t minimock.Tester

	funcAllTableNames          func() (sa1 []string, err error)
	inspectFuncAllTableNames   func()
	afterAllTableNamesCounter  uint64
	beforeAllTableNamesCounter uint64
	AllTableNamesMock          mDbOperationRepoMockAllTableNames

	funcDropForeignKey          func(tableName string, fkName string) (err error)
	inspectFuncDropForeignKey   func(tableName string, fkName string)
	afterDropForeignKeyCounter  uint64
	beforeDropForeignKeyCounter uint64
	DropForeignKeyMock          mDbOperationRepoMockDropForeignKey

	funcDropTable          func(tableName string) (err error)
	inspectFuncDropTable   func(tableName string)
	afterDropTableCounter  uint64
	beforeDropTableCounter uint64
	DropTableMock          mDbOperationRepoMockDropTable

	funcGetForeignKeys          func(tableName string) (f1 ForeignKeys, err error)
	inspectFuncGetForeignKeys   func(tableName string)
	afterGetForeignKeysCounter  uint64
	beforeGetForeignKeysCounter uint64
	GetForeignKeysMock          mDbOperationRepoMockGetForeignKeys

	funcTruncateDatabase          func() (err error)
	inspectFuncTruncateDatabase   func()
	afterTruncateDatabaseCounter  uint64
	beforeTruncateDatabaseCounter uint64
	TruncateDatabaseMock          mDbOperationRepoMockTruncateDatabase
}

// NewDbOperationRepoMock returns a mock for DBOperationRepo
func NewDbOperationRepoMock(t minimock.Tester) *DbOperationRepoMock {
	m := &DbOperationRepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AllTableNamesMock = mDbOperationRepoMockAllTableNames{mock: m}

	m.DropForeignKeyMock = mDbOperationRepoMockDropForeignKey{mock: m}
	m.DropForeignKeyMock.callArgs = []*DbOperationRepoMockDropForeignKeyParams{}

	m.DropTableMock = mDbOperationRepoMockDropTable{mock: m}
	m.DropTableMock.callArgs = []*DbOperationRepoMockDropTableParams{}

	m.GetForeignKeysMock = mDbOperationRepoMockGetForeignKeys{mock: m}
	m.GetForeignKeysMock.callArgs = []*DbOperationRepoMockGetForeignKeysParams{}

	m.TruncateDatabaseMock = mDbOperationRepoMockTruncateDatabase{mock: m}

	return m
}

type mDbOperationRepoMockAllTableNames struct {
	mock               *DbOperationRepoMock
	defaultExpectation *DbOperationRepoMockAllTableNamesExpectation
	expectations       []*DbOperationRepoMockAllTableNamesExpectation
}

// DbOperationRepoMockAllTableNamesExpectation specifies expectation struct of the DBOperationRepo.AllTableNames
type DbOperationRepoMockAllTableNamesExpectation struct {
	mock *DbOperationRepoMock

	results *DbOperationRepoMockAllTableNamesResults
	Counter uint64
}

// DbOperationRepoMockAllTableNamesResults contains results of the DBOperationRepo.AllTableNames
type DbOperationRepoMockAllTableNamesResults struct {
	sa1 []string
	err error
}

// Expect sets up expected params for DBOperationRepo.AllTableNames
func (mmAllTableNames *mDbOperationRepoMockAllTableNames) Expect() *mDbOperationRepoMockAllTableNames {
	if mmAllTableNames.mock.funcAllTableNames != nil {
		mmAllTableNames.mock.t.Fatalf("DbOperationRepoMock.AllTableNames mock is already set by Set")
	}

	if mmAllTableNames.defaultExpectation == nil {
		mmAllTableNames.defaultExpectation = &DbOperationRepoMockAllTableNamesExpectation{}
	}

	return mmAllTableNames
}

// Inspect accepts an inspector function that has same arguments as the DBOperationRepo.AllTableNames
func (mmAllTableNames *mDbOperationRepoMockAllTableNames) Inspect(f func()) *mDbOperationRepoMockAllTableNames {
	if mmAllTableNames.mock.inspectFuncAllTableNames != nil {
		mmAllTableNames.mock.t.Fatalf("Inspect function is already set for DbOperationRepoMock.AllTableNames")
	}

	mmAllTableNames.mock.inspectFuncAllTableNames = f

	return mmAllTableNames
}

// Return sets up results that will be returned by DBOperationRepo.AllTableNames
func (mmAllTableNames *mDbOperationRepoMockAllTableNames) Return(sa1 []string, err error) *DbOperationRepoMock {
	if mmAllTableNames.mock.funcAllTableNames != nil {
		mmAllTableNames.mock.t.Fatalf("DbOperationRepoMock.AllTableNames mock is already set by Set")
	}

	if mmAllTableNames.defaultExpectation == nil {
		mmAllTableNames.defaultExpectation = &DbOperationRepoMockAllTableNamesExpectation{mock: mmAllTableNames.mock}
	}
	mmAllTableNames.defaultExpectation.results = &DbOperationRepoMockAllTableNamesResults{sa1, err}
	return mmAllTableNames.mock
}

// Set uses given function f to mock the DBOperationRepo.AllTableNames method
func (mmAllTableNames *mDbOperationRepoMockAllTableNames) Set(f func() (sa1 []string, err error)) *DbOperationRepoMock {
	if mmAllTableNames.defaultExpectation != nil {
		mmAllTableNames.mock.t.Fatalf("Default expectation is already set for the DBOperationRepo.AllTableNames method")
	}

	if len(mmAllTableNames.expectations) > 0 {
		mmAllTableNames.mock.t.Fatalf("Some expectations are already set for the DBOperationRepo.AllTableNames method")
	}

	mmAllTableNames.mock.funcAllTableNames = f
	return mmAllTableNames.mock
}

// AllTableNames implements DBOperationRepo
func (mmAllTableNames *DbOperationRepoMock) AllTableNames() (sa1 []string, err error) {
	mm_atomic.AddUint64(&mmAllTableNames.beforeAllTableNamesCounter, 1)
	defer mm_atomic.AddUint64(&mmAllTableNames.afterAllTableNamesCounter, 1)

	if mmAllTableNames.inspectFuncAllTableNames != nil {
		mmAllTableNames.inspectFuncAllTableNames()
	}

	if mmAllTableNames.AllTableNamesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAllTableNames.AllTableNamesMock.defaultExpectation.Counter, 1)

		mm_results := mmAllTableNames.AllTableNamesMock.defaultExpectation.results
		if mm_results == nil {
			mmAllTableNames.t.Fatal("No results are set for the DbOperationRepoMock.AllTableNames")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmAllTableNames.funcAllTableNames != nil {
		return mmAllTableNames.funcAllTableNames()
	}
	mmAllTableNames.t.Fatalf("Unexpected call to DbOperationRepoMock.AllTableNames.")
	return
}

// AllTableNamesAfterCounter returns a count of finished DbOperationRepoMock.AllTableNames invocations
func (mmAllTableNames *DbOperationRepoMock) AllTableNamesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAllTableNames.afterAllTableNamesCounter)
}

// AllTableNamesBeforeCounter returns a count of DbOperationRepoMock.AllTableNames invocations
func (mmAllTableNames *DbOperationRepoMock) AllTableNamesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAllTableNames.beforeAllTableNamesCounter)
}

// MinimockAllTableNamesDone returns true if the count of the AllTableNames invocations corresponds
// the number of defined expectations
func (m *DbOperationRepoMock) MinimockAllTableNamesDone() bool {
	for _, e := range m.AllTableNamesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AllTableNamesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAllTableNamesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAllTableNames != nil && mm_atomic.LoadUint64(&m.afterAllTableNamesCounter) < 1 {
		return false
	}
	return true
}

// MinimockAllTableNamesInspect logs each unmet expectation
func (m *DbOperationRepoMock) MinimockAllTableNamesInspect() {
	for _, e := range m.AllTableNamesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DbOperationRepoMock.AllTableNames")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AllTableNamesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAllTableNamesCounter) < 1 {
		m.t.Error("Expected call to DbOperationRepoMock.AllTableNames")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAllTableNames != nil && mm_atomic.LoadUint64(&m.afterAllTableNamesCounter) < 1 {
		m.t.Error("Expected call to DbOperationRepoMock.AllTableNames")
	}
}

type mDbOperationRepoMockDropForeignKey struct {
	mock               *DbOperationRepoMock
	defaultExpectation *DbOperationRepoMockDropForeignKeyExpectation
	expectations       []*DbOperationRepoMockDropForeignKeyExpectation

	callArgs []*DbOperationRepoMockDropForeignKeyParams
	mutex    sync.RWMutex
}

// DbOperationRepoMockDropForeignKeyExpectation specifies expectation struct of the DBOperationRepo.DropForeignKey
type DbOperationRepoMockDropForeignKeyExpectation struct {
	mock    *DbOperationRepoMock
	params  *DbOperationRepoMockDropForeignKeyParams
	results *DbOperationRepoMockDropForeignKeyResults
	Counter uint64
}

// DbOperationRepoMockDropForeignKeyParams contains parameters of the DBOperationRepo.DropForeignKey
type DbOperationRepoMockDropForeignKeyParams struct {
	tableName string
	fkName    string
}

// DbOperationRepoMockDropForeignKeyResults contains results of the DBOperationRepo.DropForeignKey
type DbOperationRepoMockDropForeignKeyResults struct {
	err error
}

// Expect sets up expected params for DBOperationRepo.DropForeignKey
func (mmDropForeignKey *mDbOperationRepoMockDropForeignKey) Expect(tableName string, fkName string) *mDbOperationRepoMockDropForeignKey {
	if mmDropForeignKey.mock.funcDropForeignKey != nil {
		mmDropForeignKey.mock.t.Fatalf("DbOperationRepoMock.DropForeignKey mock is already set by Set")
	}

	if mmDropForeignKey.defaultExpectation == nil {
		mmDropForeignKey.defaultExpectation = &DbOperationRepoMockDropForeignKeyExpectation{}
	}

	mmDropForeignKey.defaultExpectation.params = &DbOperationRepoMockDropForeignKeyParams{tableName, fkName}
	for _, e := range mmDropForeignKey.expectations {
		if minimock.Equal(e.params, mmDropForeignKey.defaultExpectation.params) {
			mmDropForeignKey.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDropForeignKey.defaultExpectation.params)
		}
	}

	return mmDropForeignKey
}

// Inspect accepts an inspector function that has same arguments as the DBOperationRepo.DropForeignKey
func (mmDropForeignKey *mDbOperationRepoMockDropForeignKey) Inspect(f func(tableName string, fkName string)) *mDbOperationRepoMockDropForeignKey {
	if mmDropForeignKey.mock.inspectFuncDropForeignKey != nil {
		mmDropForeignKey.mock.t.Fatalf("Inspect function is already set for DbOperationRepoMock.DropForeignKey")
	}

	mmDropForeignKey.mock.inspectFuncDropForeignKey = f

	return mmDropForeignKey
}

// Return sets up results that will be returned by DBOperationRepo.DropForeignKey
func (mmDropForeignKey *mDbOperationRepoMockDropForeignKey) Return(err error) *DbOperationRepoMock {
	if mmDropForeignKey.mock.funcDropForeignKey != nil {
		mmDropForeignKey.mock.t.Fatalf("DbOperationRepoMock.DropForeignKey mock is already set by Set")
	}

	if mmDropForeignKey.defaultExpectation == nil {
		mmDropForeignKey.defaultExpectation = &DbOperationRepoMockDropForeignKeyExpectation{mock: mmDropForeignKey.mock}
	}
	mmDropForeignKey.defaultExpectation.results = &DbOperationRepoMockDropForeignKeyResults{err}
	return mmDropForeignKey.mock
}

// Set uses given function f to mock the DBOperationRepo.DropForeignKey method
func (mmDropForeignKey *mDbOperationRepoMockDropForeignKey) Set(f func(tableName string, fkName string) (err error)) *DbOperationRepoMock {
	if mmDropForeignKey.defaultExpectation != nil {
		mmDropForeignKey.mock.t.Fatalf("Default expectation is already set for the DBOperationRepo.DropForeignKey method")
	}

	if len(mmDropForeignKey.expectations) > 0 {
		mmDropForeignKey.mock.t.Fatalf("Some expectations are already set for the DBOperationRepo.DropForeignKey method")
	}

	mmDropForeignKey.mock.funcDropForeignKey = f
	return mmDropForeignKey.mock
}

// When sets expectation for the DBOperationRepo.DropForeignKey which will trigger the result defined by the following
// Then helper
func (mmDropForeignKey *mDbOperationRepoMockDropForeignKey) When(tableName string, fkName string) *DbOperationRepoMockDropForeignKeyExpectation {
	if mmDropForeignKey.mock.funcDropForeignKey != nil {
		mmDropForeignKey.mock.t.Fatalf("DbOperationRepoMock.DropForeignKey mock is already set by Set")
	}

	expectation := &DbOperationRepoMockDropForeignKeyExpectation{
		mock:   mmDropForeignKey.mock,
		params: &DbOperationRepoMockDropForeignKeyParams{tableName, fkName},
	}
	mmDropForeignKey.expectations = append(mmDropForeignKey.expectations, expectation)
	return expectation
}

// Then sets up DBOperationRepo.DropForeignKey return parameters for the expectation previously defined by the When method
func (e *DbOperationRepoMockDropForeignKeyExpectation) Then(err error) *DbOperationRepoMock {
	e.results = &DbOperationRepoMockDropForeignKeyResults{err}
	return e.mock
}

// DropForeignKey implements DBOperationRepo
func (mmDropForeignKey *DbOperationRepoMock) DropForeignKey(tableName string, fkName string) (err error) {
	mm_atomic.AddUint64(&mmDropForeignKey.beforeDropForeignKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmDropForeignKey.afterDropForeignKeyCounter, 1)

	if mmDropForeignKey.inspectFuncDropForeignKey != nil {
		mmDropForeignKey.inspectFuncDropForeignKey(tableName, fkName)
	}

	mm_params := &DbOperationRepoMockDropForeignKeyParams{tableName, fkName}

	// Record call args
	mmDropForeignKey.DropForeignKeyMock.mutex.Lock()
	mmDropForeignKey.DropForeignKeyMock.callArgs = append(mmDropForeignKey.DropForeignKeyMock.callArgs, mm_params)
	mmDropForeignKey.DropForeignKeyMock.mutex.Unlock()

	for _, e := range mmDropForeignKey.DropForeignKeyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDropForeignKey.DropForeignKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDropForeignKey.DropForeignKeyMock.defaultExpectation.Counter, 1)
		mm_want := mmDropForeignKey.DropForeignKeyMock.defaultExpectation.params
		mm_got := DbOperationRepoMockDropForeignKeyParams{tableName, fkName}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDropForeignKey.t.Errorf("DbOperationRepoMock.DropForeignKey got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDropForeignKey.DropForeignKeyMock.defaultExpectation.results
		if mm_results == nil {
			mmDropForeignKey.t.Fatal("No results are set for the DbOperationRepoMock.DropForeignKey")
		}
		return (*mm_results).err
	}
	if mmDropForeignKey.funcDropForeignKey != nil {
		return mmDropForeignKey.funcDropForeignKey(tableName, fkName)
	}
	mmDropForeignKey.t.Fatalf("Unexpected call to DbOperationRepoMock.DropForeignKey. %v %v", tableName, fkName)
	return
}

// DropForeignKeyAfterCounter returns a count of finished DbOperationRepoMock.DropForeignKey invocations
func (mmDropForeignKey *DbOperationRepoMock) DropForeignKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDropForeignKey.afterDropForeignKeyCounter)
}

// DropForeignKeyBeforeCounter returns a count of DbOperationRepoMock.DropForeignKey invocations
func (mmDropForeignKey *DbOperationRepoMock) DropForeignKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDropForeignKey.beforeDropForeignKeyCounter)
}

// Calls returns a list of arguments used in each call to DbOperationRepoMock.DropForeignKey.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDropForeignKey *mDbOperationRepoMockDropForeignKey) Calls() []*DbOperationRepoMockDropForeignKeyParams {
	mmDropForeignKey.mutex.RLock()

	argCopy := make([]*DbOperationRepoMockDropForeignKeyParams, len(mmDropForeignKey.callArgs))
	copy(argCopy, mmDropForeignKey.callArgs)

	mmDropForeignKey.mutex.RUnlock()

	return argCopy
}

// MinimockDropForeignKeyDone returns true if the count of the DropForeignKey invocations corresponds
// the number of defined expectations
func (m *DbOperationRepoMock) MinimockDropForeignKeyDone() bool {
	for _, e := range m.DropForeignKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DropForeignKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDropForeignKeyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDropForeignKey != nil && mm_atomic.LoadUint64(&m.afterDropForeignKeyCounter) < 1 {
		return false
	}
	return true
}

// MinimockDropForeignKeyInspect logs each unmet expectation
func (m *DbOperationRepoMock) MinimockDropForeignKeyInspect() {
	for _, e := range m.DropForeignKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DbOperationRepoMock.DropForeignKey with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DropForeignKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDropForeignKeyCounter) < 1 {
		if m.DropForeignKeyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DbOperationRepoMock.DropForeignKey")
		} else {
			m.t.Errorf("Expected call to DbOperationRepoMock.DropForeignKey with params: %#v", *m.DropForeignKeyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDropForeignKey != nil && mm_atomic.LoadUint64(&m.afterDropForeignKeyCounter) < 1 {
		m.t.Error("Expected call to DbOperationRepoMock.DropForeignKey")
	}
}

type mDbOperationRepoMockDropTable struct {
	mock               *DbOperationRepoMock
	defaultExpectation *DbOperationRepoMockDropTableExpectation
	expectations       []*DbOperationRepoMockDropTableExpectation

	callArgs []*DbOperationRepoMockDropTableParams
	mutex    sync.RWMutex
}

// DbOperationRepoMockDropTableExpectation specifies expectation struct of the DBOperationRepo.DropTable
type DbOperationRepoMockDropTableExpectation struct {
	mock    *DbOperationRepoMock
	params  *DbOperationRepoMockDropTableParams
	results *DbOperationRepoMockDropTableResults
	Counter uint64
}

// DbOperationRepoMockDropTableParams contains parameters of the DBOperationRepo.DropTable
type DbOperationRepoMockDropTableParams struct {
	tableName string
}

// DbOperationRepoMockDropTableResults contains results of the DBOperationRepo.DropTable
type DbOperationRepoMockDropTableResults struct {
	err error
}

// Expect sets up expected params for DBOperationRepo.DropTable
func (mmDropTable *mDbOperationRepoMockDropTable) Expect(tableName string) *mDbOperationRepoMockDropTable {
	if mmDropTable.mock.funcDropTable != nil {
		mmDropTable.mock.t.Fatalf("DbOperationRepoMock.DropTable mock is already set by Set")
	}

	if mmDropTable.defaultExpectation == nil {
		mmDropTable.defaultExpectation = &DbOperationRepoMockDropTableExpectation{}
	}

	mmDropTable.defaultExpectation.params = &DbOperationRepoMockDropTableParams{tableName}
	for _, e := range mmDropTable.expectations {
		if minimock.Equal(e.params, mmDropTable.defaultExpectation.params) {
			mmDropTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDropTable.defaultExpectation.params)
		}
	}

	return mmDropTable
}

// Inspect accepts an inspector function that has same arguments as the DBOperationRepo.DropTable
func (mmDropTable *mDbOperationRepoMockDropTable) Inspect(f func(tableName string)) *mDbOperationRepoMockDropTable {
	if mmDropTable.mock.inspectFuncDropTable != nil {
		mmDropTable.mock.t.Fatalf("Inspect function is already set for DbOperationRepoMock.DropTable")
	}

	mmDropTable.mock.inspectFuncDropTable = f

	return mmDropTable
}

// Return sets up results that will be returned by DBOperationRepo.DropTable
func (mmDropTable *mDbOperationRepoMockDropTable) Return(err error) *DbOperationRepoMock {
	if mmDropTable.mock.funcDropTable != nil {
		mmDropTable.mock.t.Fatalf("DbOperationRepoMock.DropTable mock is already set by Set")
	}

	if mmDropTable.defaultExpectation == nil {
		mmDropTable.defaultExpectation = &DbOperationRepoMockDropTableExpectation{mock: mmDropTable.mock}
	}
	mmDropTable.defaultExpectation.results = &DbOperationRepoMockDropTableResults{err}
	return mmDropTable.mock
}

// Set uses given function f to mock the DBOperationRepo.DropTable method
func (mmDropTable *mDbOperationRepoMockDropTable) Set(f func(tableName string) (err error)) *DbOperationRepoMock {
	if mmDropTable.defaultExpectation != nil {
		mmDropTable.mock.t.Fatalf("Default expectation is already set for the DBOperationRepo.DropTable method")
	}

	if len(mmDropTable.expectations) > 0 {
		mmDropTable.mock.t.Fatalf("Some expectations are already set for the DBOperationRepo.DropTable method")
	}

	mmDropTable.mock.funcDropTable = f
	return mmDropTable.mock
}

// When sets expectation for the DBOperationRepo.DropTable which will trigger the result defined by the following
// Then helper
func (mmDropTable *mDbOperationRepoMockDropTable) When(tableName string) *DbOperationRepoMockDropTableExpectation {
	if mmDropTable.mock.funcDropTable != nil {
		mmDropTable.mock.t.Fatalf("DbOperationRepoMock.DropTable mock is already set by Set")
	}

	expectation := &DbOperationRepoMockDropTableExpectation{
		mock:   mmDropTable.mock,
		params: &DbOperationRepoMockDropTableParams{tableName},
	}
	mmDropTable.expectations = append(mmDropTable.expectations, expectation)
	return expectation
}

// Then sets up DBOperationRepo.DropTable return parameters for the expectation previously defined by the When method
func (e *DbOperationRepoMockDropTableExpectation) Then(err error) *DbOperationRepoMock {
	e.results = &DbOperationRepoMockDropTableResults{err}
	return e.mock
}

// DropTable implements DBOperationRepo
func (mmDropTable *DbOperationRepoMock) DropTable(tableName string) (err error) {
	mm_atomic.AddUint64(&mmDropTable.beforeDropTableCounter, 1)
	defer mm_atomic.AddUint64(&mmDropTable.afterDropTableCounter, 1)

	if mmDropTable.inspectFuncDropTable != nil {
		mmDropTable.inspectFuncDropTable(tableName)
	}

	mm_params := &DbOperationRepoMockDropTableParams{tableName}

	// Record call args
	mmDropTable.DropTableMock.mutex.Lock()
	mmDropTable.DropTableMock.callArgs = append(mmDropTable.DropTableMock.callArgs, mm_params)
	mmDropTable.DropTableMock.mutex.Unlock()

	for _, e := range mmDropTable.DropTableMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDropTable.DropTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDropTable.DropTableMock.defaultExpectation.Counter, 1)
		mm_want := mmDropTable.DropTableMock.defaultExpectation.params
		mm_got := DbOperationRepoMockDropTableParams{tableName}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDropTable.t.Errorf("DbOperationRepoMock.DropTable got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDropTable.DropTableMock.defaultExpectation.results
		if mm_results == nil {
			mmDropTable.t.Fatal("No results are set for the DbOperationRepoMock.DropTable")
		}
		return (*mm_results).err
	}
	if mmDropTable.funcDropTable != nil {
		return mmDropTable.funcDropTable(tableName)
	}
	mmDropTable.t.Fatalf("Unexpected call to DbOperationRepoMock.DropTable. %v", tableName)
	return
}

// DropTableAfterCounter returns a count of finished DbOperationRepoMock.DropTable invocations
func (mmDropTable *DbOperationRepoMock) DropTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDropTable.afterDropTableCounter)
}

// DropTableBeforeCounter returns a count of DbOperationRepoMock.DropTable invocations
func (mmDropTable *DbOperationRepoMock) DropTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDropTable.beforeDropTableCounter)
}

// Calls returns a list of arguments used in each call to DbOperationRepoMock.DropTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDropTable *mDbOperationRepoMockDropTable) Calls() []*DbOperationRepoMockDropTableParams {
	mmDropTable.mutex.RLock()

	argCopy := make([]*DbOperationRepoMockDropTableParams, len(mmDropTable.callArgs))
	copy(argCopy, mmDropTable.callArgs)

	mmDropTable.mutex.RUnlock()

	return argCopy
}

// MinimockDropTableDone returns true if the count of the DropTable invocations corresponds
// the number of defined expectations
func (m *DbOperationRepoMock) MinimockDropTableDone() bool {
	for _, e := range m.DropTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DropTableMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDropTableCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDropTable != nil && mm_atomic.LoadUint64(&m.afterDropTableCounter) < 1 {
		return false
	}
	return true
}

// MinimockDropTableInspect logs each unmet expectation
func (m *DbOperationRepoMock) MinimockDropTableInspect() {
	for _, e := range m.DropTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DbOperationRepoMock.DropTable with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DropTableMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDropTableCounter) < 1 {
		if m.DropTableMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DbOperationRepoMock.DropTable")
		} else {
			m.t.Errorf("Expected call to DbOperationRepoMock.DropTable with params: %#v", *m.DropTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDropTable != nil && mm_atomic.LoadUint64(&m.afterDropTableCounter) < 1 {
		m.t.Error("Expected call to DbOperationRepoMock.DropTable")
	}
}

type mDbOperationRepoMockGetForeignKeys struct {
	mock               *DbOperationRepoMock
	defaultExpectation *DbOperationRepoMockGetForeignKeysExpectation
	expectations       []*DbOperationRepoMockGetForeignKeysExpectation

	callArgs []*DbOperationRepoMockGetForeignKeysParams
	mutex    sync.RWMutex
}

// DbOperationRepoMockGetForeignKeysExpectation specifies expectation struct of the DBOperationRepo.GetForeignKeys
type DbOperationRepoMockGetForeignKeysExpectation struct {
	mock    *DbOperationRepoMock
	params  *DbOperationRepoMockGetForeignKeysParams
	results *DbOperationRepoMockGetForeignKeysResults
	Counter uint64
}

// DbOperationRepoMockGetForeignKeysParams contains parameters of the DBOperationRepo.GetForeignKeys
type DbOperationRepoMockGetForeignKeysParams struct {
	tableName string
}

// DbOperationRepoMockGetForeignKeysResults contains results of the DBOperationRepo.GetForeignKeys
type DbOperationRepoMockGetForeignKeysResults struct {
	f1  ForeignKeys
	err error
}

// Expect sets up expected params for DBOperationRepo.GetForeignKeys
func (mmGetForeignKeys *mDbOperationRepoMockGetForeignKeys) Expect(tableName string) *mDbOperationRepoMockGetForeignKeys {
	if mmGetForeignKeys.mock.funcGetForeignKeys != nil {
		mmGetForeignKeys.mock.t.Fatalf("DbOperationRepoMock.GetForeignKeys mock is already set by Set")
	}

	if mmGetForeignKeys.defaultExpectation == nil {
		mmGetForeignKeys.defaultExpectation = &DbOperationRepoMockGetForeignKeysExpectation{}
	}

	mmGetForeignKeys.defaultExpectation.params = &DbOperationRepoMockGetForeignKeysParams{tableName}
	for _, e := range mmGetForeignKeys.expectations {
		if minimock.Equal(e.params, mmGetForeignKeys.defaultExpectation.params) {
			mmGetForeignKeys.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetForeignKeys.defaultExpectation.params)
		}
	}

	return mmGetForeignKeys
}

// Inspect accepts an inspector function that has same arguments as the DBOperationRepo.GetForeignKeys
func (mmGetForeignKeys *mDbOperationRepoMockGetForeignKeys) Inspect(f func(tableName string)) *mDbOperationRepoMockGetForeignKeys {
	if mmGetForeignKeys.mock.inspectFuncGetForeignKeys != nil {
		mmGetForeignKeys.mock.t.Fatalf("Inspect function is already set for DbOperationRepoMock.GetForeignKeys")
	}

	mmGetForeignKeys.mock.inspectFuncGetForeignKeys = f

	return mmGetForeignKeys
}

// Return sets up results that will be returned by DBOperationRepo.GetForeignKeys
func (mmGetForeignKeys *mDbOperationRepoMockGetForeignKeys) Return(f1 ForeignKeys, err error) *DbOperationRepoMock {
	if mmGetForeignKeys.mock.funcGetForeignKeys != nil {
		mmGetForeignKeys.mock.t.Fatalf("DbOperationRepoMock.GetForeignKeys mock is already set by Set")
	}

	if mmGetForeignKeys.defaultExpectation == nil {
		mmGetForeignKeys.defaultExpectation = &DbOperationRepoMockGetForeignKeysExpectation{mock: mmGetForeignKeys.mock}
	}
	mmGetForeignKeys.defaultExpectation.results = &DbOperationRepoMockGetForeignKeysResults{f1, err}
	return mmGetForeignKeys.mock
}

// Set uses given function f to mock the DBOperationRepo.GetForeignKeys method
func (mmGetForeignKeys *mDbOperationRepoMockGetForeignKeys) Set(f func(tableName string) (f1 ForeignKeys, err error)) *DbOperationRepoMock {
	if mmGetForeignKeys.defaultExpectation != nil {
		mmGetForeignKeys.mock.t.Fatalf("Default expectation is already set for the DBOperationRepo.GetForeignKeys method")
	}

	if len(mmGetForeignKeys.expectations) > 0 {
		mmGetForeignKeys.mock.t.Fatalf("Some expectations are already set for the DBOperationRepo.GetForeignKeys method")
	}

	mmGetForeignKeys.mock.funcGetForeignKeys = f
	return mmGetForeignKeys.mock
}

// When sets expectation for the DBOperationRepo.GetForeignKeys which will trigger the result defined by the following
// Then helper
func (mmGetForeignKeys *mDbOperationRepoMockGetForeignKeys) When(tableName string) *DbOperationRepoMockGetForeignKeysExpectation {
	if mmGetForeignKeys.mock.funcGetForeignKeys != nil {
		mmGetForeignKeys.mock.t.Fatalf("DbOperationRepoMock.GetForeignKeys mock is already set by Set")
	}

	expectation := &DbOperationRepoMockGetForeignKeysExpectation{
		mock:   mmGetForeignKeys.mock,
		params: &DbOperationRepoMockGetForeignKeysParams{tableName},
	}
	mmGetForeignKeys.expectations = append(mmGetForeignKeys.expectations, expectation)
	return expectation
}

// Then sets up DBOperationRepo.GetForeignKeys return parameters for the expectation previously defined by the When method
func (e *DbOperationRepoMockGetForeignKeysExpectation) Then(f1 ForeignKeys, err error) *DbOperationRepoMock {
	e.results = &DbOperationRepoMockGetForeignKeysResults{f1, err}
	return e.mock
}

// GetForeignKeys implements DBOperationRepo
func (mmGetForeignKeys *DbOperationRepoMock) GetForeignKeys(tableName string) (f1 ForeignKeys, err error) {
	mm_atomic.AddUint64(&mmGetForeignKeys.beforeGetForeignKeysCounter, 1)
	defer mm_atomic.AddUint64(&mmGetForeignKeys.afterGetForeignKeysCounter, 1)

	if mmGetForeignKeys.inspectFuncGetForeignKeys != nil {
		mmGetForeignKeys.inspectFuncGetForeignKeys(tableName)
	}

	mm_params := &DbOperationRepoMockGetForeignKeysParams{tableName}

	// Record call args
	mmGetForeignKeys.GetForeignKeysMock.mutex.Lock()
	mmGetForeignKeys.GetForeignKeysMock.callArgs = append(mmGetForeignKeys.GetForeignKeysMock.callArgs, mm_params)
	mmGetForeignKeys.GetForeignKeysMock.mutex.Unlock()

	for _, e := range mmGetForeignKeys.GetForeignKeysMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.f1, e.results.err
		}
	}

	if mmGetForeignKeys.GetForeignKeysMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetForeignKeys.GetForeignKeysMock.defaultExpectation.Counter, 1)
		mm_want := mmGetForeignKeys.GetForeignKeysMock.defaultExpectation.params
		mm_got := DbOperationRepoMockGetForeignKeysParams{tableName}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetForeignKeys.t.Errorf("DbOperationRepoMock.GetForeignKeys got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetForeignKeys.GetForeignKeysMock.defaultExpectation.results
		if mm_results == nil {
			mmGetForeignKeys.t.Fatal("No results are set for the DbOperationRepoMock.GetForeignKeys")
		}
		return (*mm_results).f1, (*mm_results).err
	}
	if mmGetForeignKeys.funcGetForeignKeys != nil {
		return mmGetForeignKeys.funcGetForeignKeys(tableName)
	}
	mmGetForeignKeys.t.Fatalf("Unexpected call to DbOperationRepoMock.GetForeignKeys. %v", tableName)
	return
}

// GetForeignKeysAfterCounter returns a count of finished DbOperationRepoMock.GetForeignKeys invocations
func (mmGetForeignKeys *DbOperationRepoMock) GetForeignKeysAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetForeignKeys.afterGetForeignKeysCounter)
}

// GetForeignKeysBeforeCounter returns a count of DbOperationRepoMock.GetForeignKeys invocations
func (mmGetForeignKeys *DbOperationRepoMock) GetForeignKeysBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetForeignKeys.beforeGetForeignKeysCounter)
}

// Calls returns a list of arguments used in each call to DbOperationRepoMock.GetForeignKeys.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetForeignKeys *mDbOperationRepoMockGetForeignKeys) Calls() []*DbOperationRepoMockGetForeignKeysParams {
	mmGetForeignKeys.mutex.RLock()

	argCopy := make([]*DbOperationRepoMockGetForeignKeysParams, len(mmGetForeignKeys.callArgs))
	copy(argCopy, mmGetForeignKeys.callArgs)

	mmGetForeignKeys.mutex.RUnlock()

	return argCopy
}

// MinimockGetForeignKeysDone returns true if the count of the GetForeignKeys invocations corresponds
// the number of defined expectations
func (m *DbOperationRepoMock) MinimockGetForeignKeysDone() bool {
	for _, e := range m.GetForeignKeysMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetForeignKeysMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetForeignKeysCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetForeignKeys != nil && mm_atomic.LoadUint64(&m.afterGetForeignKeysCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetForeignKeysInspect logs each unmet expectation
func (m *DbOperationRepoMock) MinimockGetForeignKeysInspect() {
	for _, e := range m.GetForeignKeysMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DbOperationRepoMock.GetForeignKeys with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetForeignKeysMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetForeignKeysCounter) < 1 {
		if m.GetForeignKeysMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DbOperationRepoMock.GetForeignKeys")
		} else {
			m.t.Errorf("Expected call to DbOperationRepoMock.GetForeignKeys with params: %#v", *m.GetForeignKeysMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetForeignKeys != nil && mm_atomic.LoadUint64(&m.afterGetForeignKeysCounter) < 1 {
		m.t.Error("Expected call to DbOperationRepoMock.GetForeignKeys")
	}
}

type mDbOperationRepoMockTruncateDatabase struct {
	mock               *DbOperationRepoMock
	defaultExpectation *DbOperationRepoMockTruncateDatabaseExpectation
	expectations       []*DbOperationRepoMockTruncateDatabaseExpectation
}

// DbOperationRepoMockTruncateDatabaseExpectation specifies expectation struct of the DBOperationRepo.TruncateDatabase
type DbOperationRepoMockTruncateDatabaseExpectation struct {
	mock *DbOperationRepoMock

	results *DbOperationRepoMockTruncateDatabaseResults
	Counter uint64
}

// DbOperationRepoMockTruncateDatabaseResults contains results of the DBOperationRepo.TruncateDatabase
type DbOperationRepoMockTruncateDatabaseResults struct {
	err error
}

// Expect sets up expected params for DBOperationRepo.TruncateDatabase
func (mmTruncateDatabase *mDbOperationRepoMockTruncateDatabase) Expect() *mDbOperationRepoMockTruncateDatabase {
	if mmTruncateDatabase.mock.funcTruncateDatabase != nil {
		mmTruncateDatabase.mock.t.Fatalf("DbOperationRepoMock.TruncateDatabase mock is already set by Set")
	}

	if mmTruncateDatabase.defaultExpectation == nil {
		mmTruncateDatabase.defaultExpectation = &DbOperationRepoMockTruncateDatabaseExpectation{}
	}

	return mmTruncateDatabase
}

// Inspect accepts an inspector function that has same arguments as the DBOperationRepo.TruncateDatabase
func (mmTruncateDatabase *mDbOperationRepoMockTruncateDatabase) Inspect(f func()) *mDbOperationRepoMockTruncateDatabase {
	if mmTruncateDatabase.mock.inspectFuncTruncateDatabase != nil {
		mmTruncateDatabase.mock.t.Fatalf("Inspect function is already set for DbOperationRepoMock.TruncateDatabase")
	}

	mmTruncateDatabase.mock.inspectFuncTruncateDatabase = f

	return mmTruncateDatabase
}

// Return sets up results that will be returned by DBOperationRepo.TruncateDatabase
func (mmTruncateDatabase *mDbOperationRepoMockTruncateDatabase) Return(err error) *DbOperationRepoMock {
	if mmTruncateDatabase.mock.funcTruncateDatabase != nil {
		mmTruncateDatabase.mock.t.Fatalf("DbOperationRepoMock.TruncateDatabase mock is already set by Set")
	}

	if mmTruncateDatabase.defaultExpectation == nil {
		mmTruncateDatabase.defaultExpectation = &DbOperationRepoMockTruncateDatabaseExpectation{mock: mmTruncateDatabase.mock}
	}
	mmTruncateDatabase.defaultExpectation.results = &DbOperationRepoMockTruncateDatabaseResults{err}
	return mmTruncateDatabase.mock
}

// Set uses given function f to mock the DBOperationRepo.TruncateDatabase method
func (mmTruncateDatabase *mDbOperationRepoMockTruncateDatabase) Set(f func() (err error)) *DbOperationRepoMock {
	if mmTruncateDatabase.defaultExpectation != nil {
		mmTruncateDatabase.mock.t.Fatalf("Default expectation is already set for the DBOperationRepo.TruncateDatabase method")
	}

	if len(mmTruncateDatabase.expectations) > 0 {
		mmTruncateDatabase.mock.t.Fatalf("Some expectations are already set for the DBOperationRepo.TruncateDatabase method")
	}

	mmTruncateDatabase.mock.funcTruncateDatabase = f
	return mmTruncateDatabase.mock
}

// TruncateDatabase implements DBOperationRepo
func (mmTruncateDatabase *DbOperationRepoMock) TruncateDatabase() (err error) {
	mm_atomic.AddUint64(&mmTruncateDatabase.beforeTruncateDatabaseCounter, 1)
	defer mm_atomic.AddUint64(&mmTruncateDatabase.afterTruncateDatabaseCounter, 1)

	if mmTruncateDatabase.inspectFuncTruncateDatabase != nil {
		mmTruncateDatabase.inspectFuncTruncateDatabase()
	}

	if mmTruncateDatabase.TruncateDatabaseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTruncateDatabase.TruncateDatabaseMock.defaultExpectation.Counter, 1)

		mm_results := mmTruncateDatabase.TruncateDatabaseMock.defaultExpectation.results
		if mm_results == nil {
			mmTruncateDatabase.t.Fatal("No results are set for the DbOperationRepoMock.TruncateDatabase")
		}
		return (*mm_results).err
	}
	if mmTruncateDatabase.funcTruncateDatabase != nil {
		return mmTruncateDatabase.funcTruncateDatabase()
	}
	mmTruncateDatabase.t.Fatalf("Unexpected call to DbOperationRepoMock.TruncateDatabase.")
	return
}

// TruncateDatabaseAfterCounter returns a count of finished DbOperationRepoMock.TruncateDatabase invocations
func (mmTruncateDatabase *DbOperationRepoMock) TruncateDatabaseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTruncateDatabase.afterTruncateDatabaseCounter)
}

// TruncateDatabaseBeforeCounter returns a count of DbOperationRepoMock.TruncateDatabase invocations
func (mmTruncateDatabase *DbOperationRepoMock) TruncateDatabaseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTruncateDatabase.beforeTruncateDatabaseCounter)
}

// MinimockTruncateDatabaseDone returns true if the count of the TruncateDatabase invocations corresponds
// the number of defined expectations
func (m *DbOperationRepoMock) MinimockTruncateDatabaseDone() bool {
	for _, e := range m.TruncateDatabaseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TruncateDatabaseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTruncateDatabaseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTruncateDatabase != nil && mm_atomic.LoadUint64(&m.afterTruncateDatabaseCounter) < 1 {
		return false
	}
	return true
}

// MinimockTruncateDatabaseInspect logs each unmet expectation
func (m *DbOperationRepoMock) MinimockTruncateDatabaseInspect() {
	for _, e := range m.TruncateDatabaseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DbOperationRepoMock.TruncateDatabase")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TruncateDatabaseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTruncateDatabaseCounter) < 1 {
		m.t.Error("Expected call to DbOperationRepoMock.TruncateDatabase")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTruncateDatabase != nil && mm_atomic.LoadUint64(&m.afterTruncateDatabaseCounter) < 1 {
		m.t.Error("Expected call to DbOperationRepoMock.TruncateDatabase")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DbOperationRepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAllTableNamesInspect()

		m.MinimockDropForeignKeyInspect()

		m.MinimockDropTableInspect()

		m.MinimockGetForeignKeysInspect()

		m.MinimockTruncateDatabaseInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DbOperationRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DbOperationRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAllTableNamesDone() &&
		m.MinimockDropForeignKeyDone() &&
		m.MinimockDropTableDone() &&
		m.MinimockGetForeignKeysDone() &&
		m.MinimockTruncateDatabaseDone()
}
